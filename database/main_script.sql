-- AUTH RELATED TABLES (GENERATED BY BETTER AUTH)
create table "user" ("id" text not null primary key, "name" text not null, "email" text not null unique, "emailVerified" boolean not null, "image" text, "createdAt" timestamp not null, "updatedAt" timestamp not null);

create table "session" ("id" text not null primary key, "expiresAt" timestamp not null, "token" text not null unique, "createdAt" timestamp not null, "updatedAt" timestamp not null, "ipAddress" text, "userAgent" text, "userId" text not null references "user" ("id"));

create table "account" ("id" text not null primary key, "accountId" text not null, "providerId" text not null, "userId" text not null references "user" ("id"), "accessToken" text, "refreshToken" text, "idToken" text, "accessTokenExpiresAt" timestamp, "refreshTokenExpiresAt" timestamp, "scope" text, "password" text, "createdAt" timestamp not null, "updatedAt" timestamp not null);

create table "verification" ("id" text not null primary key, "identifier" text not null, "value" text not null, "expiresAt" timestamp not null, "createdAt" timestamp, "updatedAt" timestamp);

-- Drop indexes
DROP INDEX IF EXISTS idx_user_progress;
DROP INDEX IF EXISTS idx_user_courses;
DROP INDEX IF EXISTS idx_snippet_interactions;

-- Drop tables in reverse order of dependencies
DROP TABLE IF EXISTS snippet_interactions;
DROP TABLE IF EXISTS user_courses;
DROP TABLE IF EXISTS user_progress;
DROP TABLE IF EXISTS activities;
DROP TABLE IF EXISTS lessons;
DROP TABLE IF EXISTS snippets;
DROP TABLE IF EXISTS modules;
DROP TABLE IF EXISTS courses;

-- OTHER TABLES
-- Courses Table
CREATE TABLE courses (
    course_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    topic TEXT NOT NULL,
    description TEXT,
    preferences JSONB NOT NULL, -- Store preferences as JSON
    metadata JSONB NOT NULL, -- Main course metadata in JSON format
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Modules Table
CREATE TABLE modules (
    module_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    course_id INTEGER REFERENCES courses(course_id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    metadata JSONB NOT NULL, -- Module metadata in JSON format
    module_order INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Lessons Table
CREATE TABLE lessons (
    lesson_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    module_id INTEGER REFERENCES modules(module_id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    content JSONB NOT NULL, -- Lesson content in JSON format
    display_order INTEGER, -- Combined order of lessons and activities within a module
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Activities Table
CREATE TABLE activities (
    activity_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    module_id INTEGER REFERENCES modules(module_id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    type VARCHAR(50) NOT NULL, -- e.g., 'quiz'
    content JSONB NOT NULL, -- Activity content in JSON format
    display_order INTEGER, -- Combined order of lessons and activities within a module
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Courses Table (to track course enrollment)
CREATE TABLE user_courses (
    enrollment_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
    course_id INTEGER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE,
    enrolled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_notification_received INTEGER DEFAULT 1,
    UNIQUE(user_id, course_id)
);

-- Create index for user courses
CREATE INDEX idx_user_courses ON user_courses(user_id, course_id);


------------ FUTURE IMPROVEMENTS -------------

-- Snippets Table
CREATE TABLE snippets (
    snippet_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    module_id INTEGER REFERENCES modules(module_id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    overview TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Progress Table (with Users table dependency)
CREATE TABLE user_progress (
    progress_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
    entity_type VARCHAR(20) NOT NULL, -- 'course', 'module', 'lesson', 'activity'
    entity_id INTEGER NOT NULL, -- References the corresponding entity ID
    is_completed BOOLEAN DEFAULT FALSE,
    is_liked BOOLEAN DEFAULT FALSE,
    is_saved BOOLEAN DEFAULT FALSE,
    last_accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, entity_type, entity_id)
);

-- Add likes and saves functionality to snippets
CREATE TABLE snippet_interactions (
    interaction_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
    snippet_id INTEGER NOT NULL REFERENCES snippets(snippet_id) ON DELETE CASCADE,
    is_liked BOOLEAN DEFAULT FALSE,
    is_saved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, snippet_id)
);

-- Create index for snippet interactions
CREATE INDEX idx_snippet_interactions ON snippet_interactions(user_id, snippet_id);